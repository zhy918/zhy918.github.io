{"meta":{"title":"贝贝张的博客","subtitle":null,"description":"贝贝张的博客","author":"贝贝张","url":"https://zhy918.github.io"},"pages":[{"title":"","date":"un11fin11","updated":"un11fin11","comments":true,"path":"about/index.html","permalink":"https://zhy918.github.io/about/index.html","excerpt":"","text":"关于我WEB 开发，主要开发语言 html css js，熟悉使用 jqurey、bootstrap 等主流框架；对 vue.js 情有独钟；有一定的代码洁癖。 对服务端、计算机网络等技能有所了解。 热爱开源项目、热爱新技术、热爱新事物。 关于工作城市：成都 关于学习正在往终身学习者前进…近期学习方向：java 关于座右铭 不为无益之事，何以遣有涯之生 关于爱好热爱运动，尤其喜爱骑自行车、哲学、旅行。 联系我 Blog: 贝贝 GitHub: zhy918 QQ: QQ"}],"posts":[{"title":"HTML5 Canvas","slug":"HTML5 Canvas","date":"un22fin22","updated":"un33fin33","comments":true,"path":"2019/02/19/HTML5 Canvas/","link":"","permalink":"https://zhy918.github.io/2019/02/19/HTML5 Canvas/","excerpt":"","text":"一、HTML5 Canvas（画布） 简介HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，您可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。 二、浏览器支持支持 &lt;canvas&gt; 元素的浏览器：Internet Explorer 9+、Firefox、Opera、Chrome、Safari 。注意: Internet Explorer 8 及更早 IE 版本的浏览器不支持 &lt;canvas&gt; 元素。 三、创建&lt;canvas&gt;标签默认情况下 &lt;canvas&gt; 元素没有边框和内容，通常需要指定一个id属性 (脚本中经常引用)， width 和 height 属性定义的画布的大小，使用 style 属性来添加边框。1&lt;canvas id=&quot;myCanvas&quot; width=&quot;100&quot; height=&quot;100&quot; style=&quot;border:1px solid #FF6600;&quot;&gt;&lt;/canvas&gt; 四、用 JavaScript 来绘制图像canvas 元素本身没有绘图能力。所有的绘制工作在 JavaScript 内完成：1234567&lt;script&gt; var c=document.getElementById(&quot;myCanvas&quot;); // 找到 &lt;canvas&gt; 元素var ctx=c.getContext(&quot;2d&quot;); // 创建 context 对象// 绘制一个红色的矩形ctx.fillStyle=&quot;#FF0000&quot;; ctx.fillRect(0,0,150,75); &lt;/script&gt; JavaScript 使用 id 来寻找 canvas 元素： 1var c=document.getElementById(&quot;myCanvas&quot;); 创建 context 对象： 1var cxt=c.getContext(&quot;2d&quot;); getContext(“2d”) 对象是内建的 HTML5 对象，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。下面的两行代码绘制一个红色的矩形： 12cxt.fillStyle=&quot;#FF0000&quot;;cxt.fillRect(0,0,150,75); fillStyle 方法将其染成红色，fillRect 方法规定了形状、位置和尺寸。 未完待续。。。。。。","categories":[{"name":"HTML5","slug":"HTML5","permalink":"https://zhy918.github.io/categories/HTML5/"}],"tags":[{"name":"HTML5 Canvas","slug":"HTML5-Canvas","permalink":"https://zhy918.github.io/tags/HTML5-Canvas/"}]},{"title":"HTML5","slug":"html5","date":"un22fin22","updated":"un33fin33","comments":true,"path":"2019/02/19/html5/","link":"","permalink":"https://zhy918.github.io/2019/02/19/html5/","excerpt":"","text":"一、HTML5 简介1、什么是 HTML5 HTML5 是最新一代 HTML 标准，2014年10月由万维网联盟（W3C）完成标准制定。 HTML5 设计目的是为了在移动设备上支持多媒体。 2、HTML5 规则 新特性应该基于 HTML、CSS、DOM 以及 JavaScript。 减少对外部插件的需求（比如 Flash） 更优秀的错误处理 更多取代脚本的标记 HTML5 应该独立于设备 开发进程应对公众透明 3、HTML5 的改进 新元素 新属性 完全支持 CSS3 Video 和 Audio 2D/3D 制图 本地存储 本地 SQL 数据 Web 应用 4、HTML5 一些有趣新特性 用于绘画的 canvas 元素 用于媒介回放的 video 和 audio 元素 对本地离线存储的更好的支持 新的特殊内容元素，比如 article、footer、header、nav、section 新的表单控件，比如 calendar、date、time、email、url、search 5、HTML5 简单地开发应用 本地数据存储 访问本地文件 本地 SQL 数据 缓存引用 Javascript 工作者 XHTMLHttpRequest 2 6、HTML5 多媒体使用 HTML5 你可以简单的在网页中播放 视频(video)与音频 (audio) HTML5 &lt;video&gt; HTML5 &lt;audio&gt; 7、HTML5 图形使用 HTML5 你可以简单的绘制图形 使用&lt;canvas&gt;元素 使用内联 SVG 使用CSS3 2D/CSS 3D 8、HTML5 使用CSS3 新选择器 新属性 动画 2D/3D 转换 圆角 阴影效果 可下载的字体 9、HTML5 文档头HTML5 文档的第一行声明必须是&lt;!DOCTYPE html&gt;1&lt;!DOCTYPE html&gt; 二、浏览器支持1、浏览器支持HTML5 仍处于完善之中。但大部分现代浏览器已经具备了某些 HTML5 支持。支持 HTML5 的浏览器：国外Firefox（火狐浏览器）、IE9及其更高版本、Chrome（谷歌浏览器）、Safari、Opera等；国内傲游浏览器（Maxthon）、360浏览器、搜狗浏览器、QQ浏览器、猎豹浏览器等。 2、将 HTML5 元素定义为块元素所有浏览器，包括旧的和最新的，对无法识别的元素会作为内联元素自动处理。正因为如此，你可以 “教会” 浏览器处理 “未知” 的HTML元素。HTML5 定了8个新的 HTML 语义（semantic）元素。所有这些元素都是块级元素。为了能让旧版本的浏览器正确显示这些元素，你可以设置 CSS 的 display 属性值为 block实例：123header, section, footer, aside, nav, main, article, figure &#123; display: block; &#125; 3、为 HTML 添加新元素JavaScript 语句 document.createElement(“myEl”) 是为了给 IE 浏览器添加新的元素。123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;为 HTML 添加新元素&lt;/title&gt; &lt;script&gt; document.createElement(&quot;myEl&quot;) &lt;/script&gt; &lt;style&gt; myEl &#123; display: block; background-color: #FF6600; padding: 50px; font-size: 50px; &#125; &lt;/style&gt; &lt;/head&gt;&lt;body&gt;&lt;myEl&gt;我的新元素&lt;/myEl&gt;&lt;/body&gt;&lt;/html&gt; 4、Internet Explorer 浏览器问题你可以使用以上的方法来为 IE 浏览器添加 HTML5 元素，但是 Internet Explorer 8 及更早 IE 版本的浏览器不支持以上的方式。 Shiv 解决方案：使用百度静态资源库引入123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;Styling HTML5&lt;/title&gt; &lt;!--[if lt IE 9]&gt; &lt;script src=&quot;http://apps.bdimg.com/libs/html5shiv/3.7/html5shiv.min.js&quot;&gt;&lt;/script&gt; &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;article&gt;解决Internet Explorer 8 及更早 IE 版本的浏览器不支持为 HTML 添加新元素&lt;/article&gt;&lt;/body&gt;&lt;/html&gt; 三、HTML5 新元素HTML5 添加了很多新元素及功能，比如: 图形的绘制、多媒体内容、更好的页面结构、更好的形式处理、几个api拖放元素、定位、网页应用程序缓存、存储、网络工作者等。 1、&lt;canvas&gt; 新元素&lt;canvas&gt; 标签定义图形，比如图表和其他图像。该标签基于 JavaScript 的绘图 API。 2、新多媒体元素&lt;audio&gt; 定义音频内容&lt;video&gt; 定义视频（video 或者 movie）&lt;source&gt; 定义多媒体资源 &lt;video&gt; 和 &lt;audio&gt;&lt;embed&gt; 定义嵌入的内容，比如插件。&lt;track&gt; 为诸如 &lt;video&gt; 和 &lt;audio&gt; 元素之类的媒介规定外部文本轨道。 3、新表单元素&lt;datalist&gt; 定义选项列表。请与 input 元素配合使用该元素，来定义 input 可能的值。&lt;keygen&gt; 规定用于表单的密钥对生成器字段。&lt;output&gt; 定义不同类型的输出，比如脚本的输出。 4、新的语义和结构元素HTML5提供了新的元素来创建更好的页面结构：&lt;article&gt; 定义页面独立的内容区域。&lt;aside&gt; 定义页面的侧边栏内容。&lt;bdi&gt; 允许您设置一段文本，使其脱离其父元素的文本方向设置。&lt;command&gt; 定义命令按钮，比如单选按钮、复选框或按钮&lt;details&gt; 用于描述文档或文档某个部分的细节&lt;dialog&gt; 定义对话框，比如提示框&lt;summary&gt; 标签包含 details 元素的标题&lt;figure&gt; 规定独立的流内容（图像、图表、照片、代码等等）。&lt;figcaption&gt; 定义 &lt;figure&gt; 元素的标题&lt;footer&gt; 定义 section 或 document 的页脚。&lt;header&gt; 定义了文档的头部区域&lt;mark&gt; 定义带有记号的文本。&lt;meter&gt; 定义度量衡。仅用于已知最大和最小值的度量。&lt;nav&gt; 定义导航链接的部分。&lt;progress&gt; 定义任何类型的任务的进度。&lt;ruby&gt; 定义 ruby 注释（中文注音或字符）。&lt;rt&gt; 定义字符（中文注音或字符）的解释或发音。&lt;rp&gt; 在 ruby 注释中使用，定义不支持 ruby 元素的浏览器所显示的内容。&lt;section&gt; 定义文档中的节（section、区段）。&lt;time&gt; 定义日期或时间。&lt;wbr&gt; 规定在文本中的何处适合添加换行符。 5、已移除的元素以下的 HTML 4.01 元素在 HTML5 中已经被删除：&lt;acronym&gt;&lt;applet&gt;&lt;basefont&gt;&lt;big&gt;&lt;center&gt;&lt;dir&gt;&lt;font&gt;&lt;frame&gt;&lt;frameset&gt;&lt;noframes&gt;&lt;strike&gt;&lt;tt&gt;","categories":[{"name":"HTML5","slug":"HTML5","permalink":"https://zhy918.github.io/categories/HTML5/"}],"tags":[{"name":"HTML5","slug":"HTML5","permalink":"https://zhy918.github.io/tags/HTML5/"}]},{"title":"超文本传输协议HTTP","slug":"超文本传输协议HTTP","date":"un22fin22","updated":"un33fin33","comments":true,"path":"2019/02/19/超文本传输协议HTTP/","link":"","permalink":"https://zhy918.github.io/2019/02/19/超文本传输协议HTTP/","excerpt":"","text":"一、HTTP的操作过程1、HTTP协议HTTP是面向事务的、无连接的应用层协议。为了保证数据的可靠传输，HTTP使用了面向连接的TCP作为运输层协议。所以，在发送HTTP报文之前都需要先建立TCP连接。在建立TCP连接的三次握手的前两部分完成后，万维网客户就把HTTP请求报文作为三次握手的第三个报文的数据发送给万维网服务器，服务器收到HTTP请求后，就把所请求的文档作为响应报文返回给客户。从此可看出，请求一个万维网文档所需的时间是该文档的传输时间加上两倍往返时间RTT。 2、HTTP/1.1HTTP/1.0使用非持续连接，每次请求一个文档都要有两倍RTT的开销。HTTP/1.1使用了持续连接，万维网服务器在发送响应后仍然在一段时间内保持这条连接，使同一个客户和该服务器可以继续在这条连接上传送后续的HTTP请求报文和响应报文。HTTP/1.1的持续连接有两种工作方式：非流水线方式和流水线方式。非流水线方式的特点，是客户在收到前一个响应后才能发出下一个请求。流水线方式的特点，是客户在收到HTTP的响应报文之前就能够接着发送新的请求报文。流水线工作方式使TCP连接中的空闲时间减少，提高了下载文档的效率。 二、代理服务器代理服务器是一种网络实体，它又称为万维网高速缓存。代理服务器把最近的一些请求和响应暂存在本地磁盘中。若一个网络中使用了代理服务器，该网络中的主机浏览器向因特网的服务器请求服务时，就先和代理服务器建立TCP连接，并向代理服务器发出HTTP请求报文。若代理服务器中已经存放了所请求的对象，则把这个对象放入HTTP响应报文中返回给客户浏览器；否则，代理服务器就代表客户浏览器与因特网上的源点服务器建立TCP连接，并发送HTTP请求报文。源点服务器把所请求的对象放在HTTP响应报文中返回给代理服务器。代理服务器收到这个对象后，先复制在自己的本地存储器中，然后再把这个对象放在HTTP响应报文中，通过已经建立的TCP连接返回给客户浏览器。 三、HTTP的报文结构1、HTTP有两类报文（1）请求报文：从客户向服务器发送请求报文。（2）响应报文：从服务器到客户的回答。由于HTTP是面向文本的，因此在报文中的每一个字段都是一些ASCII码串，因而各个字段的长度都是不确定的。 2、HTTP报文组成HTTP请求报文和响应报文都是由三个部分组成。这两种报文格式的区别就是开始行不同。（1）开始行：用于区分是请求报文还是响应报文。在请求报文中的开始行叫做请求行，而在响应报文中的开始行叫做状态行。（2）首部行：用来说明浏览器、服务器或报文主体的一些信息。首部可以有好几行，但也可以不使用。（3）实体主体：在请求报文中一般都不用这个字段，而在响应报文中也可能没有这个字段。 3、HTTP请求报文请求行包括：方法、请求资源的URL、HTTP的版本。所谓“方法”就是对所请求的对象进行的操作，这些方法实际上也就是一些命令。因此，请求报文的类型是由它所采用的方法决定的。请求报文中常用的几种方法：OPTION：请求一些选项的信息。GET：请求读取由URL所标志的信息。HEAD：请求读取由URL所标志的信息的首部。POST：给服务器添加信息（例如：注释）PUT：在指明的URL下存储一个文档。DELETE：删除指明的URL所标志的资源。TRACE：用来进行环回测试的请求报文。CONNECT：用于代理服务器。 3、HTTP状态行状态行包括：HTTP的版本、状态码、解释状态码的简单短语。状态码都是三位数字的，分为5大类共33种。1xx：表示通知信息，如请求收到了或正在进行处理。2xx：表示成功，如接受或知道了。3xx：表示重定向，如要完成请求还必须采取进一步的行动。4xx：表示客户的错误，如请求中有错误的语法或不能完成。5xx：表示服务器的错误，如服务器失效无法完成请求。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://zhy918.github.io/categories/计算机网络/"}],"tags":[{"name":"HTTP","slug":"HTTP","permalink":"https://zhy918.github.io/tags/HTTP/"},{"name":"HTTPS","slug":"HTTPS","permalink":"https://zhy918.github.io/tags/HTTPS/"}]},{"title":"Vue CLI 3.x搭建","slug":"Vue CLI 3.x搭建","date":"un11fin11","updated":"un11fin11","comments":true,"path":"2019/02/18/Vue CLI 3.x搭建/","link":"","permalink":"https://zhy918.github.io/2019/02/18/Vue CLI 3.x搭建/","excerpt":"","text":"一、Vue CLI介绍 Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供： 通过 @vue/cli 搭建交互式的项目脚手架。 通过 @vue/cli + @vue/cli-service-global 快速开始零配置原型开发。 一个运行时依赖 (@vue/cli-service)，该依赖： 可升级； 基于 webpack 构建，并带有合理的默认配置； 可以通过项目内的配置文件进行配置； 可以通过插件进行扩展。 一个丰富的官方插件集合，集成了前端生态中最好的工具。 一套完全图形化的创建和管理 Vue.js 项目的用户界面。 Vue CLI系统的组件包括： 1.CLICLI (@vue/cli) 是一个全局安装的 npm 包，提供了终端里的 vue 命令。它可以通过 vue create 快速创建一个新项目的脚手架，或者直接通过 vue serve 构建新想法的原型。你也可以通过 vue ui 通过一套图形化界面管理你的所有项目。我们会在接下来的指南中逐章节深入介绍。 2.CLI 服务CLI 服务 (@vue/cli-service) 是一个开发环境依赖。它是一个 npm 包，局部安装在每个 @vue/cli 创建的项目中。CLI 服务是构建于 webpack 和 webpack-dev-server 之上的。它包含了：加载其它 CLI 插件的核心服务；一个针对绝大部分应用优化过的内部的 webpack 配置；项目内部的 vue-cli-service 命令，提供 serve、build 和 inspect 命令。如果你熟悉 create-react-app 的话，@vue/cli-service 实际上大致等价于 react-scripts，尽管功能集合不一样。CLI 服务章节涵盖了它的具体用法。 3.CLI 插件CLI 插件是向你的 Vue 项目提供可选功能的 npm 包，例如 Babel/TypeScript 转译、ESLint 集成、单元测试和 end-to-end 测试等。Vue CLI 插件的名字以 @vue/cli-plugin- (内建插件) 或 vue-cli-plugin- (社区插件) 开头，非常容易使用。当你在项目内部运行 vue-cli-service 命令时，它会自动解析并加载 package.json 中列出的所有 CLI 插件。插件可以作为项目创建过程的一部分，或在后期加入到项目中。它们也可以被归成一组可复用的 preset。我们会在插件和 preset 章节进行深入讨论。 二、环境支持安装Vue CLI前需要安装Node.js的支持。Node 版本要求：Vue CLI 需要 Node.js 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 nvm 或 nvm-windows 在同一台电脑中管理多个 Node 版本。 三、安装Vue CLI 3.x 关于旧版本：Vue CLI 的包名称由 vue-cli 改成了 @vue/cli。 如果你已经全局安装了旧版本的 vue-cli (1.x 或 2.x)，你需要先通过 npm uninstall vue-cli -g 或 yarn global remove vue-cli 卸载它。 目前Vue CLI已经更新到3.4.0 在命令行工具内执行以下命令，安装Vue CLI 3.x：123npm install -g @vue/cli#或者yarn global add @vue/cli 检查Vue CLI版本1vue --version 四、创建Vue项目1、cd到要创建项目的文件夹下，输入：1vue create hlw hlw是项目名称 警告如果你在 Windows 上通过 minTTY 使用 Git Bash，交互提示符并不工作。你必须通过 winpty vue.cmd create hello-world 启动这个命令。不过，如果你仍想使用 vue create hello-world，则可以通过在 ~/.bashrc 文件中添加以下行来为命令添加别名。alias vue=’winpty vue.cmd’你需要重新启动 Git Bash 终端会话以使更新后的 bashrc 文件生效。 2、选择需要安装的功能你会被提示选取一个 preset。你可以选默认的包含了基本的 Babel + ESLint 设置的 preset，也可以选“手动选择特性”来选取需要的特性。手动设置则提供了更多的选项，它们是面向生产的项目更加需要的选项释义：Babel：将ES6编译成ES5TypeScript：TypeScript语法，JS的超集Progressive Web App (PWA) Support：PWARouter：Vue路由Vuex：Vue状态管理CSS Pre-processors：CSS预处理器sass/lessLinter / Formatter：代码规范检查工具Unit Testing：单元测试E2E Testing：端到端测试 3、进入项目1cd hlw 4.启动项目1npm rum serve 五、项目目录结构 官网介绍：https://cli.vuejs.org/","categories":[{"name":"Vue","slug":"Vue","permalink":"https://zhy918.github.io/categories/Vue/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://zhy918.github.io/tags/Vue/"},{"name":"Vue CLI 3.X","slug":"Vue-CLI-3-X","permalink":"https://zhy918.github.io/tags/Vue-CLI-3-X/"}]},{"title":"计算机网络体系结构","slug":"计算机网络体系结构","date":"un11fin11","updated":"un11fin11","comments":true,"path":"2019/02/18/计算机网络体系结构/","link":"","permalink":"https://zhy918.github.io/2019/02/18/计算机网络体系结构/","excerpt":"","text":"一、计算机网络的类别1、计算机网络的定义计算机网络：一些互相连接的、自治的计算机集合。 2、几种不同类别的网络1、按网络的作用范围分类 广域网 WAN 城域网 MAN 局域网 LAN 个人区域网 PAN 2、按网络的使用者进行分类 公用网 专用网 3、用来把用户接入因特网的网络这种网络就是接入网 AN，它又被称为本地接入网或居民接入网。 二、计算机网络的性能1、计算机网络的性能指标 速率：连接在计算机网络上的主机在数字信道上传送数据的速率，单位为b/s。 带宽：在计算机网络中，带宽是指在单位时间内，从网络中某一点到另一点所能通过的“最高数据率”，单位为b/s。 吞吐量：在单位时间内通过某个网络（或信道、接口）的数据量。 时延：指数据（一个报文或分组，甚至比特）从网路的一端传到另一端所需要的时间。 发送时延：主机或路由器发送数据帧所需要的时间。 传播时延：电磁波在信道中传播一定的距离所需要的时间。 处理时延：主机或路由器在收到分组时要花费一定的时间进行处理。 排队时延：分组在经过网络传输时，要经过许多路由器。但分组在进入路由器后要先在输入队列中排队等待处理。 时延带宽积：传播时延与带宽的乘积。 往返时间 RTT：从发送方发送数据开始，到发送方收到来自接收方的确认，总共经历的时间。 利用率：信道利用率是指某信道有百分之几的时间是被利用的。网络利用率则是全网络的信道利用率的加权平均值。 2、计算机网络的非性能特征 费用 质量 标准化 可靠性 可扩展性和可升级性 易于管理和维护 三、计算机网络体系结构1、计算机网络体系结构的形成为了使不同体系的计算机网络都能互联，国际标准化组织ISO于1977年成立了专门机构研究该问题，不就，著名的开发系统互联基本参考模型OSI/RM，简称OSI，这就是所谓的七层协议的体系结构。但现今规模最大、覆盖全世界的因特网并未使用OSI标准。OSI失败的原因可以归纳为： OSI的专家们缺乏实际经验，他们在完成OSI标准时缺乏商业驱动力； OSI协议实现起来过分复杂，而且运行效率很低； OSI标准的制定周期太长，因而使得按OSI标准生产的设备无法及时进入市场； OSI的层次划分不太合理，有些功能在多个层次中重复出现。 2、协议与划分层次网络协议：为进行网络中的数据交换而建立的规则、标准或约定称为网络协议。网络协议主要有一下三个要素组成： 语法，即数据和控制信息的结构和格式； 语义，即需要发出何种控制信息，完成何种动作以及做出何种响应； 同步，即事件实现顺序的详细说明。 ARPANET的研制经验表明，对于非常复杂的计算机网络协议，其结构应该是层次式的。分层可以代理很多好处。如： 各层之间是独立的 灵活性好 结构上可分割开 易于实现和维护 能促进标准化工作通常各层索要完成的功能主要有以下一些： 差错控制 流量控制 分段和重组 复用和分用 *连接建立的释放分层当然有一些缺点，例如，有些功能在不同的层次中重复出现，因为产生了额外的开销。 我们把计算机网络各层及其协议的集合，称为计算机网络体系。换种说法，计算机网络的体系结构就是这个计算机网络及其构件所应完成的功能的精确定义。体系结构是抽象的，而实现则是，具体的是真正在运行的计算机硬件和软件。 3、具有五层协议的体系结构 学习计算计算机网络原理时往往采用一种只有五层协议的体系结构 应用层：应用层的任务是通过应用进程间的交互来完成特定网络应用。 支持万维应用的HTTP协议 支持电子邮件的SMTP协议 支持文件传送的FTP协议 我们将应用层交互的数据单元称为报文 运输层：负责向两个主机中进程之间的通讯提供通用的数据传输服务。 复用：多个应用层进程同时使用下面的运输服务 分用：运输层把收到的信息分别交付上面应用层中的相应进程 传输控制协议TCP–提供面向连接的、可靠的数据传输服务，数据传输单位为报文段 用户数据报协议UDP–提供无连接的、尽最大努力的数据传输服务（不保证数据传输的可靠性），数据传输的单位是用户数据报 网络层（网际层/IP层）：负责为分组交换网上的不同主机提供通讯服务。 网络层把运输层产生的报文段或用户数据报封装成分组（也称IP数据报）或包进行传送 因特网主要的网络层协议是无连接的网际协议IP（IP协议） 数据链路层：将网络层交下来的IP数据报组装成帧，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息、地址信息、差错控制等）。 物理层：透明地传输比特流（0/1），传递信息所利用的物理媒介（如双绞线、同轴电缆、光缆、无线信道等）不在物理层，而是在物理层之下，有人称之为第0层。 在因特网所使用的协议中，最重要的和最著名的就是TCP和IP两个协议。现在人们经常提到的TCP/IP并不一定单指TCP和IP两个协议，而往往表示因特网所使用的TCP/IP协议族。数据在各层之间的传输过程： 4、实体、协议、服务和服务访问点 实体：任何可发送或接受信息的硬件或软件进程。 协议：控制两个对等实体（或多个实体）进行通信的规则的集合。 在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。要实现本层协议还需要使用下面一层所提供的服务。 协议的实现保证向上层提供服务。使用本层服务的实体只能看见服务而无法看见下面的协议，下面的协议对上面是透明的。 协议是“水平的”，即协议是控制对等实体之间通讯的规则。 服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。 在同一系统中相邻两层的实体进行交互（即信息交换）的地方，通常称为服务访问点SAP。 看一个计算机网络协议是否正确，不能只看正常情况下是否正确，而且还必须非常仔细地检查这个协议能否应付各种异常情况。 5、TCP/IP体系结构TCP/IP体系结构只有4层，从上往下依次是：应用层、运输层、网际层、网络接口层。TCP/IP协议可以为各式各样的应用提供服务，同时TCP/IP协议也允许IP协议在各式各样的网络构成的互联网上运行。","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://zhy918.github.io/categories/计算机网络/"}],"tags":[{"name":"计算机网络体系结构","slug":"计算机网络体系结构","permalink":"https://zhy918.github.io/tags/计算机网络体系结构/"},{"name":"TCP/IP","slug":"TCP-IP","permalink":"https://zhy918.github.io/tags/TCP-IP/"}]},{"title":"JavaScript闭包","slug":"JavaScript闭包","date":"un00fin00","updated":"un11fin11","comments":true,"path":"2019/02/17/JavaScript闭包/","link":"","permalink":"https://zhy918.github.io/2019/02/17/JavaScript闭包/","excerpt":"","text":"JavaScript闭包一、变量的作用域要理解Javascript中的闭包，先理解变量的作用域。作用域：可以对数据进行访问操作的范围，分为全局作用域和局部作用域。Javascript中变量可分为全局变量和局部变量。全局变量：全局作用域内都可以被访问的变量。局部变量：只能在局部作用域被访问的变量，作用域以外不能被访问。12345678910111213&lt;script&gt;// 全局作用域var a = &apos;我是全局变量&apos;;function f1() &#123;// 局部作用域var b = &apos;局部变量&apos;;// 内部作用域可以访问全局变量aconsole.log(a);&#125;aa();// 外部作用域不能访问局部变量bconsole.log(b); // 报错 b is not defined&lt;/script&gt; 注意：在局部作用域（函数内部）声明变量时，不能省略var指令，否则将声明一个全局变量1234567function f1() &#123;// 由于未使用var声明变量c，c成为全局变量，变量c将能被全局访问c = &apos;我是局部作用域内的全局变量&apos;;&#125;// 函数必须要被调用其代码才会被执行f1();console.log(c); 二、闭包闭包：在主函数内部创建一个能够返回主函数内部变量的子函数叫闭包。看以下代码：12345678var add = function () &#123;var x = &apos;奥特曼&apos;return function () &#123;console.log(&apos;葫芦娃&apos;);return this;&#125; &#125;console.log(add()()); // 输出 葫芦娃 奥特曼 window 这时我们就可以在函数外部访问局部作用域内的变量x了 三、闭包的优点1、可以读取函数内部的变量2、让局部变量的值始终保持在内存中。 四、闭包的缺点1、闭包会让函数中的变量都被保存在内存中，内存消耗大，影响网页的性能，可能导致内存泄露，不能滥用闭包。在退出函数之前，删除不使用的局部变量。2、闭包会在父函数外部，改变父函数内部变量的值。","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zhy918.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zhy918.github.io/tags/JavaScript/"},{"name":"闭包","slug":"闭包","permalink":"https://zhy918.github.io/tags/闭包/"}]},{"title":"JavaScript原型链","slug":"JavaScript原型链","date":"un00fin00","updated":"un00fin00","comments":true,"path":"2019/02/17/JavaScript原型链/","link":"","permalink":"https://zhy918.github.io/2019/02/17/JavaScript原型链/","excerpt":"","text":"JavaScript原型链一、原型对象看以下代码：123function Fun() &#123;&#125;;var fn = new Fun();console.log( fn.__proto__ === Fun.prototype ); // 输出true JavaScript中new一个新的对象实例分三步：123var fn=&#123;&#125;; fn.__proto__=Fun.prototype; Fun.call(fn); __proto__属性：可见，每个对象new时都会在其内部初始化一个__proto__属性，对象的__proto__属性指向其构造函数的prototype属性，对于对象实例来说，prototype就是它的原型对象。prototype属性：真实代码里不推荐是使用__proto__属性，因为这是一个设计上的失误，导致 __proto__属性是可以被修改的，同时意味着 JavaScript 的属性查找机制会因此而“瘫痪”，所以强烈的不建议使用它。如果你确实要通过一个对象访问其原型，使用方法：1Object.getPrototypeOf(fn) 二、原型链看以下代码：12console.log( typeof Fun.prototype ); // 输出Objectconsole.log( Fun.prototype.__proto__ === Object.prototype ); // 输出true __proto__的作用是在访问一个对象的属性时，如果该对象内部不存在这个属性，就会去该对象的__proto__属性所指向的那个原型对象（父对象）里找，如果原型对象（父对象）也不存在这个属性，则继续往原型对象的__proto__属性所指向的那个原型对象（爷爷对象）里找，如果还没找到，则继续往上找，直到原型链顶端null，若还没找到，则返回undefined，通过对象的__proto__属性一直向上访问属性的一条链即为原型链。。 三、原型链的顶端看以下代码：123456console.log(String.prototype.__proto__ === Object.prototype); // 输出trueconsole.log(Number.prototype.__proto__ === Object.prototype); // 输出trueconsole.log(Boolean.prototype.__proto__ === Object.prototype); // 输出trueconsole.log(Array.prototype.__proto__ === Object.prototype); // 输出trueconsole.log(Function.prototype.__proto__ === Object.prototype); // 输出trueconsole.log(Object.prototype.__proto__ === null) // 输出true 除了Object.prototype本身，对象的原型最终指向Object.prototype，null是原型链的顶端。Object.prototype的原型对象为空，Object.prototype是原型对象的源头，继承由此开始。 四、函数也是对象看以下代码：1console.log(Function.__proto__ === Function.prototype) // 输出true 函数也是对象，JavaScript的内置函数Function也不例外，对象Function的__proto__属性指向它的构造函数的prototype属性，Function.prototype即是它的原型对象。 五、constructor属性对象才都有constructor属性，constructor在原型链中作为对象prototype的属性存在，它从对象指向对象的构造函数，每个对象都有构造函数。 六、constructor的顶端123456console.log(String.constructor === Function);console.log(Number.constructor === Function);console.log(Boolean.constructor === Function);console.log(Array.constructor === Function);console.log(Object.constructor === Function);console.log(Function.constructor === Function); 可以看出Function的构造函数就是它自己，所有函数最终都是由Function构造得来，所以constructor属性的顶端是Function。 七、总结1、函数的prototype即是对象的原型对象2、通过对象的__proto__属性一直向上访问prototype属性的一条链即为原型链。3、对象独有的属性：__proto__和constructor；4、函数独有的属性：prototype，但JavaScript中函数也是对象，所以函数也有__proto__和constructor属性；5、constructor属性指向该对象的构造函数，最终指向Function。 参考博文：https://blog.csdn.net/cc18868876837/article/details/81211729","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zhy918.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://zhy918.github.io/tags/JavaScript/"},{"name":"原型链","slug":"原型链","permalink":"https://zhy918.github.io/tags/原型链/"}]}]}